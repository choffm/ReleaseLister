/*
 * Copyright (C) 2012 vibee clemens@v.de1.cc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package cc.de1.v.releaselister.view;

import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.util.LinkedList;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import de.vibee.releaselister.model.PathHolder;
import de.vibee.releaselister.model.ReleasePath;

/**
 *
 * @author vibee
 */
public class PathEditor extends javax.swing.JFrame {

    /**
     * Creates new form PathEditor
     */
    private static PathEditor pathEditor;
    private List<ReleasePath> path;
    private DefaultTableModel model;
    
    public PathEditor() {
        initComponents();
        model = (DefaultTableModel) pathTable.getModel();
        updatePathTable();
        this.addWindowListener(w);
    }
    
    WindowListener w = new WindowListener() {

        @Override
        public void windowOpened(WindowEvent e) {
            ReleaseLister.getInstance().setEnabled(false);
        }

        @Override
        public void windowClosing(WindowEvent e) {
            ReleaseLister.getInstance().setEnabled(true);
        }

        @Override
        public void windowClosed(WindowEvent e) {
            
        }

        @Override
        public void windowIconified(WindowEvent e) {
            
        }

        @Override
        public void windowDeiconified(WindowEvent e) {
            
        }

        @Override
        public void windowActivated(WindowEvent e) {
            
        }

        @Override
        public void windowDeactivated(WindowEvent e) {
          
        }
    };
   
    private void updatePathTable(){
        this.path = PathHolder.getInstance().getPathList();
        while (model.getRowCount() != 0) {
            model.removeRow(0);
        }
        for (ReleasePath p : path){
            model.addRow(new Object[]{p.getPath().getAbsolutePath()});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pathTable = new javax.swing.JTable();
        addPathButton = new javax.swing.JButton();
        removePathTable = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Path Options");
        setResizable(false);

        pathTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Path"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        pathTable.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(pathTable);
        pathTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        pathTable.getColumnModel().getColumn(0).setResizable(false);

        addPathButton.setText("Add Path...");
        addPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPathButtonActionPerformed(evt);
            }
        });

        removePathTable.setText("Remove Path");
        removePathTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePathTableActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addPathButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removePathTable, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPathButton)
                    .addComponent(removePathTable)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        /*
         * Delete pathes from model, which have been removed
         */
        List<ReleasePath> toDelete = new LinkedList<>();
        for (ReleasePath r : PathHolder.getInstance().getPathList()){
            boolean keepIt = false;
            for (int i = 0; i < model.getRowCount(); i++){
                if (r.getPath().getAbsolutePath().compareTo((String)model.getValueAt(i, 0)) == 0){
                    keepIt = true;
                }
            }
            if (!keepIt){
                toDelete.add(r);
            }
        }
        
        for (ReleasePath r : toDelete){
            PathHolder.getInstance().getPathList().remove(r);
        }
        
        /**
         * Add pathes to model, which have been added in Editor
         */
        for (int i = 0; i < model.getRowCount(); i++){
            boolean addIt = true;
            for (ReleasePath r : PathHolder.getInstance().getPathList()){
                
                if (r.getPath().getAbsolutePath().compareTo((String)model.getValueAt(i, 0)) == 0){
                    addIt = false;
                }
            }
            if (addIt){
                PathHolder.getInstance().getPathList().add(new ReleasePath(new File((String)model.getValueAt(i, 0))));
            }
            
        }
        WindowEvent wev = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(wev);
    }//GEN-LAST:event_okButtonActionPerformed

    private void addPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPathButtonActionPerformed
        final JFileChooser jfc = new LocatedFileChoser();
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfc.setMultiSelectionEnabled(true);
        int returnVal = jfc.showOpenDialog(jfc);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            for (File f : jfc.getSelectedFiles()){
                boolean duplicate = false;
                for (int i = 0; i < model.getRowCount(); i++){
                    String content = (String)model.getValueAt(i, 0);
                    
                    /*
                     * If path already exists in editor
                     */
                    if (content.compareTo(f.getAbsolutePath()) == 0){
                        JOptionPane.showMessageDialog(null, f.getAbsolutePath() + " already exist in path list.");
                        duplicate = true;
                    }
                    
                    /*
                     * if path is subpath of a path existing in editor
                     */
                    else if (content.length() > f.getAbsolutePath().length()){
                        content = content.substring(0, f.getAbsolutePath().length());
                        if (content.compareTo(f.getAbsolutePath()) == 0){
                            JOptionPane.showMessageDialog(null, "One or more subpaths of " + f.getAbsolutePath() + " already exist in path list. "
                                    + "Please remove the subpaths before adding this path.");
                            duplicate = true;
                        }
                    }
                    
                    /*
                     * if a subpath of actucal path in editor exists
                     */
                    else if (content.length() < f.getAbsolutePath().length()){
                        String newPath = f.getAbsolutePath().substring(0, content.length());
                        if (content.compareTo(newPath) == 0){
                            JOptionPane.showMessageDialog(null, "You are trying to add a subpath of an already existing path to the path list. Please remove "
                                    + "the root path before");
                            duplicate = true;
                        }
                    }
                    
                    if (duplicate){
                        break;
                    }
                    
                }
                if (!duplicate){
                    model.addRow(new Object[]{f.getAbsolutePath()});
                }
            }
        }
    }//GEN-LAST:event_addPathButtonActionPerformed

    private void removePathTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePathTableActionPerformed
        int[] selectedRows = pathTable.getSelectedRows();
        for (int i = selectedRows.length - 1; i >= 0; i--){
            model.removeRow(selectedRows[i]);
        }
    }//GEN-LAST:event_removePathTableActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        WindowEvent wev = new WindowEvent(this, WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(wev);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPathButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JTable pathTable;
    private javax.swing.JButton removePathTable;
    // End of variables declaration//GEN-END:variables
}
